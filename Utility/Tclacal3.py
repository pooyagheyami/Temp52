# -*- coding: utf-8 -*-
#In the name of God
#!/usr/bin/env python



import wx
import wx.lib.analogclock as ac
import calendar
#import khayyam 
from datetime import timedelta
import datetime
import  wx.lib.buttons  as  buttons

#----------------------------------------------------------------------
# This file was generated by C:\Portable Python 2.7.6.1\App\Lib\site-packages\wx-3.0-msw\wx\tools\img2py.py
#
from wx.lib.embeddedimage import PyEmbeddedImage

L = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAIAAADZrBkAAAAAA3NCSVQICAjb4U/gAAAASUlE"
    "QVQokdXTyw0AMAgC0NL9d8YFED9JD/X+ghoFyTOvuzDPGIAxy4xjxqTMG81KI1jH6LQNax6N"
    "SOtI3WQp09m8dCsxEj88TgDTyhUg3Ky0GgAAAABJRU5ErkJggg==")


R = PyEmbeddedImage(
    "iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAIAAADZrBkAAAAAA3NCSVQICAjb4U/gAAAATElE"
    "QVQokdXTyREAIAgDQGP/PccCgEQZfeh/R44AkuP8zYa5zQA0f9NSFSmk6a2SfiSp3JpklC/3"
    "FpPkWZo+w6rEKiZSXjJ9GfjhcBZM5RUgzLJUOgAAAABJRU5ErkJggg==")

Day_name = [u'Pazartesi',u'Salı',u'Çarşamba',u'Perşembe',u'Cuma',u'Cumartesi',u'Pazar']
Month_name = [u'Ocak',u'Şubat',u'Mart',u'Nisan',u'Mayıs',u'Haziran',u'Temmuz',u'Ağustos',u'Eylül',u'Ekim',u'Kasım',u'Aralık']


###########################################################################
## Class MyPanel2
###########################################################################


class MyPanel2 ( wx.Panel ):

    def __init__( self, parent,year,month, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 400,200 ), style = wx.TAB_TRAVERSAL, name = wx.EmptyString ):
        wx.Panel.__init__ ( self, parent, id = id, pos = pos, size = size, style = style, name = name )
        Vsiz1 = wx.BoxSizer( wx.VERTICAL )
        Hsz1 = wx.BoxSizer( wx.HORIZONTAL )

        if year == -1:
            self.sallat = int(datetime.date.today().strftime('%Y'))
            sal = datetime.date.today().strftime('%Y')
        else:
            self.sallat = year
            sal = str(year)
        if month == -1:
            self.mahlat = int(datetime.date.today().strftime('%m'))
            mah = datetime.date.today().strftime('%m')
        else:
            self.mahlat = month
            mah = str(month)

        mrooz = datetime.date.today().strftime('%d')

        self.bkbtn = wx.BitmapButton( self, wx.ID_ANY, R.GetBitmap(), wx.DefaultPosition, wx.Size( 18,18 ), wx.BU_AUTODRAW )
        Hsz1.Add( self.bkbtn, 0, wx.ALIGN_CENTER, 5 )

        self.mbtn = buttons.GenButton( self, wx.ID_ANY, Month_name[int(mah)-1]+' '+sal, wx.DefaultPosition, wx.Size( -1,20 ), style=wx.BORDER_NONE )
        Hsz1.Add( self.mbtn, 1, wx.ALL, 5 )

        self.nxbtn = wx.BitmapButton( self, wx.ID_ANY, L.GetBitmap(), wx.DefaultPosition, wx.Size( 18,18 ), wx.BU_AUTODRAW )
        Hsz1.Add( self.nxbtn, 0, wx.ALIGN_CENTER, 5 )

        #Vsiz1.Add( Hsz1, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 5 )
        Vsiz1.Add( Hsz1, 1, wx.EXPAND, 5 )

        Hsz2 = wx.BoxSizer( wx.HORIZONTAL )

        for i in range(7):
            self.m_Days = wx.StaticText( self, wx.ID_ANY, Day_name[i], wx.DefaultPosition, wx.Size( 35,-1 ), wx.ALIGN_CENTRE )
            self.m_Days.Wrap( -1 )
            #Hsz2.Add( self.m_Days, 1, wx.ALL|wx.EXPAND, 5 )
            Hsz2.Add( self.m_Days, 1, 0, 5 )


        Vsiz1.Add( Hsz2, 1, wx.EXPAND, 5 )
        #Vsiz1.Add( Hsz2, 0, wx.EXPAND, 0 )

        Gsiz = wx.GridSizer( 6, 7, 1, 1 )

        label = calendar.monthcalendar(self.sallat,self.mahlat)
        i=0
        self.caltext = []
        if len(label) == 5:
            label.append([0,0,0,0,0,0,0])
        if len(label) == 4:
            label.append([0,0,0,0,0,0,0])
            label.append([0,0,0,0,0,0,0])

        for row in range(6):
            for clm in range(7):
                self.caltext.append( wx.Button( self, wx.ID_ANY, str(label[row][clm]), wx.DefaultPosition, wx.Size( 35,15 ),wx.NO_BORDER) )
                Gsiz.Add( self.caltext[i], 0, wx.EXPAND, 0 )
                if clm == 6:
                    self.caltext[i].SetBackgroundColour(wx.Colour( 0, 238, 0 ))
                else:
                    self.caltext[i].SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_WINDOW  ) )

                    if label[row][clm] == int(mrooz):
                        self.caltext[i].SetBackgroundColour( wx.Colour( 70, 170, 240 ) )

                i = i +1

        Vsiz1.Add( Gsiz, 5, wx.EXPAND, 5 )

        Vsz3 = wx.BoxSizer( wx.VERTICAL )

        today = datetime.date.today().isoformat()

        self.daytxt = wx.StaticText( self, wx.ID_ANY, u"Bugün: "+today, wx.DefaultPosition, wx.DefaultSize, 0 )
        self.daytxt.Wrap( -1 )

        Vsz3.Add( self.daytxt, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

        Vsiz1.Add( Vsz3, 1, wx.EXPAND, 5 )
        self.SetSizer( Vsiz1 )
        self.Layout()

        # Connect Events
        self.bkbtn.Bind( wx.EVT_BUTTON, self.Onbak )
        self.mbtn.Bind( wx.EVT_BUTTON, self.Onmonth )
        self.nxbtn.Bind( wx.EVT_BUTTON, self.Onnxt )

    def __del__( self ):
        pass

    # Virtual event handlers, overide them in your derived class
    def Onnxt( self, event ):
        self.mahlat=self.mahlat+1
        if self.mahlat>12:
            self.sallat=self.sallat+1
            self.mahlat=1

        mah =  Month_name[self.mahlat-1]
        self.mbtn.SetLabel(mah+' '+str(self.sallat))
        self.calgrid()

        self.HideWithEffect(5,200)
        self.ShowWithEffect(5,200)
        self.Refresh()
        self.Layout()

    def Onbak( self, event ):
        self.mahlat=self.mahlat-1
        if self.mahlat<=0:
            self.sallat=self.sallat-1
            self.mahlat=12

        mah =  Month_name[self.mahlat-1]
        self.mbtn.SetLabel(mah+' '+str(self.sallat))

        self.calgrid()
        self.HideWithEffect(6,200)
        self.ShowWithEffect(6,200)
        self.Refresh()
        self.Layout()

    def calgrid(self):
        label = calendar.monthcalendar(self.sallat,self.mahlat)
        i=0
        #self.caltext = []
        if len(label) == 5:
            label.append([0,0,0,0,0,0,0])
        if len(label) == 4:
            label.append([0,0,0,0,0,0,0])
            label.append([0,0,0,0,0,0,0])

        for row in range(6):
            for clm in range(7):
                self.caltext[i].SetLabel(  str(label[row][clm]) )
                '''
                self.caltext.append( wx.Button( self, wx.ID_ANY, str(label[row][clm]), wx.DefaultPosition, wx.Size( 35,15 ),wx.NO_BORDER) )
                Gsiz.Add( self.caltext[i], 0, wx.EXPAND, 0 )
		        if clm == 6:
                    self.caltext[i].SetBackgroundColour(wx.Colour( 0, 238, 0 ))
                else:
                    self.caltext[i].SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_WINDOW  ) )
                    if label[row][clm] == int(mrooz):
                                self.caltext[i].SetBackgroundColour( wx.Colour( 70, 170, 240 ) )
                '''
                i = i +1

    def Onmonth( self, event ):
        self.HideWithEffect(10,200)
        self.DestroyChildren()
        self.panel = MyPanel3(self,self.sallat)
        self.Show()





class MyPanel3 ( wx.Panel ):
    def __init__( self, parent , year  ):
        wx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 400,200 ), style = wx.TAB_TRAVERSAL )

        bSizer15 = wx.BoxSizer( wx.VERTICAL )

        bSizer16 = wx.BoxSizer( wx.HORIZONTAL )

        self.sallat = year
        self.sal = str(year)

        self.m_bpButton1 = wx.BitmapButton( self, wx.ID_ANY,  R.GetBitmap(), wx.DefaultPosition, wx.Size( 15,15 ), wx.BU_AUTODRAW )
        bSizer16.Add( self.m_bpButton1, 0, wx.ALIGN_CENTER, 5 )

        self.m_staticText18 = buttons.GenButton( self, wx.ID_ANY, self.sal, wx.DefaultPosition, wx.DefaultSize, style=wx.BORDER_NONE )
        #self.m_staticText18.Wrap( -1 )
        bSizer16.Add( self.m_staticText18, 1, wx.ALL, 5 )

        self.m_bpButton2 = wx.BitmapButton( self, wx.ID_ANY, L.GetBitmap(), wx.DefaultPosition, wx.Size( 15,15 ), wx.BU_AUTODRAW )
        bSizer16.Add( self.m_bpButton2, 0, wx.ALIGN_CENTER, 5 )

        #self.m_button2.SetForegroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_INFOBK ) )
        #self.m_button2.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_HIGHLIGHT ) )

        bSizer15.Add( bSizer16, 1, wx.EXPAND, 5 )

        gSizer1 = wx.GridSizer( 3, 4, 0, 0 )

        mont = Month_name

        self.moncal = []
        i = 0
        MID = range(12)

        for mah in range(12):
            self.moncal.append( wx.Button( self, MID[i], mont[mah], wx.DefaultPosition, wx.DefaultSize, 0 ))
                        
            gSizer1.Add( self.moncal[i], 0, wx.EXPAND, 5 )
                
            self.moncal[i].Bind( wx.EVT_BUTTON, self.Onmonth )
            i = i + 1

        bSizer15.Add( gSizer1, 5, wx.EXPAND, 1 )
        
        bSizer17 = wx.BoxSizer( wx.VERTICAL )
        
        today = datetime.date.today().isoformat()

        self.daytxt = wx.StaticText( self, wx.ID_ANY, u"Bugün: "+today, wx.DefaultPosition, wx.DefaultSize, 0 )
        self.daytxt.Wrap( -1 )
        bSizer17.Add( self.daytxt, 0, wx.ALIGN_CENTER, 1 )

        bSizer15.Add( bSizer17, 1, wx.EXPAND, 5 )
        
        self.SetSizer( bSizer15 )
        self.Layout()

        self.m_bpButton1.Bind( wx.EVT_BUTTON, self.Onleft )
        self.m_bpButton2.Bind( wx.EVT_BUTTON, self.Onright )
        self.m_staticText18.Bind( wx.EVT_BUTTON, self.Onsal )

    def Onleft( self, event ):
                        
        self.sallat=self.sallat+1
        self.m_staticText18.SetLabel(str(int(self.sallat)))
        self.HideWithEffect(5,200)
        self.Show()
        self.Refresh()
        self.Layout()
                
        
    
    def Onright( self, event ):
        self.sallat=self.sallat-1
        self.m_staticText18.SetLabel(str(int(self.sallat)))
        self.HideWithEffect(6,200)
        self.Show()
        self.Refresh()
        self.Layout()


    def Onmonth( self, event ):
        n=event.GetId()
        m=self.moncal[n].GetLabel()
        #print n,m        
        #sal=khayyam.JalaliDate.today().strftime('%N')
        sal = self.sallat
        #mah=khayyam.JalaliDate.today().strftime('%B')
        mah = n+1
        #print sal,mah
        
        self.HideWithEffect(10,200)
        self.DestroyChildren()
        self.panel = MyPanel2(self,sal,mah)
        self.Show()

    def Onsal( self, event ):
        self.HideWithEffect(10,200)
        self.DestroyChildren()
        self.panel = MyPanel4(self,self.sallat)
        self.Show()
                
class MyPanel4 ( wx.Panel ):
    
    def __init__( self, parent , years  ):
        wx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( 400,200 ), style = wx.TAB_TRAVERSAL )

        
        bSizer15 = wx.BoxSizer( wx.VERTICAL )
        
        bSizer16 = wx.BoxSizer( wx.HORIZONTAL )
        y = int(years / 10)*10
        yers = [y+i for i in range(12) ]

        self.sal=str(yers[0])
        self.salbd=str(yers[-1])
        self.sallat = yers[0]
        self.sallatbd = yers[-1]
        
        self.m_bpButton1 = wx.BitmapButton( self, wx.ID_ANY,  R.GetBitmap(), wx.DefaultPosition, wx.Size( 15,15 ), wx.BU_AUTODRAW )
        bSizer16.Add( self.m_bpButton1, 0, wx.ALIGN_CENTER, 5 )
        
        #self.m_staticText18 = buttons.GenButton( self, wx.ID_ANY, self.sal+u'-'+self.salbd, wx.DefaultPosition, wx.DefaultSize, style=wx.BORDER_NONE )
        self.m_staticText18 = wx.StaticText( self, wx.ID_ANY, self.sal+u'-'+self.salbd, wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )
       
        #self.m_staticText18.Wrap( -1 )
        bSizer16.Add( self.m_staticText18, 1, wx.ALL, 5 )
        
        self.m_bpButton2 = wx.BitmapButton( self, wx.ID_ANY, L.GetBitmap(), wx.DefaultPosition, wx.Size( 15,15 ), wx.BU_AUTODRAW )
        bSizer16.Add( self.m_bpButton2, 0, wx.ALIGN_CENTER, 5 )

        #self.m_button2.SetForegroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_INFOBK ) )
        #self.m_button2.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_HIGHLIGHT ) )

        
        bSizer15.Add( bSizer16, 1, wx.EXPAND, 5 )
        
        gSizer1 = wx.GridSizer( 3, 4, 0, 0 )

        
        
        self.yercal = []
        i = 0
        YID = range(12)

        for yer in yers:
            self.yercal.append( wx.Button( self, YID[i], str(yer), wx.DefaultPosition, wx.DefaultSize, 0 ))
                       
            gSizer1.Add( self.yercal[i], 0, wx.EXPAND, 5 )
                
            self.yercal[i].Bind( wx.EVT_BUTTON, self.Onmonth )
            i = i + 1
                        
                        
               
        bSizer15.Add( gSizer1, 5, wx.EXPAND, 1 )
        
        bSizer17 = wx.BoxSizer( wx.VERTICAL )
        
        today = datetime.date.today().isoformat()

        self.daytxt = wx.StaticText( self, wx.ID_ANY, u"Bugün: "+today, wx.DefaultPosition, wx.DefaultSize, 0 )
        self.daytxt.Wrap( -1 )
        bSizer17.Add( self.daytxt, 0, wx.ALIGN_CENTER, 1 )
        
        
        bSizer15.Add( bSizer17, 1, wx.EXPAND, 5 )
        
        
        self.SetSizer( bSizer15 )
        self.Layout()

        self.m_bpButton1.Bind( wx.EVT_BUTTON, self.Onleft )
        self.m_bpButton2.Bind( wx.EVT_BUTTON, self.Onright )
        #self.moncal[i].Bind( wx.EVT_BUTTON, self.Onmonth )

    def Onleft( self, event ):
        self.sallat=self.sallat+10

        self.calreng()
       
        self.HideWithEffect(5,200)
        self.Show()
        self.Refresh()
        self.Layout()
                
        
    
    def Onright( self, event ):
        self.sallat=self.sallat-10

        self.calreng()
        
        self.HideWithEffect(6,200)
        self.Show()
        self.Refresh()
        self.Layout()

    def calreng( self ):
        y = int(int(self.sallat)/ 10)*10
        yers = [y+i for i in range(12) ]
        for l in range(12):
            self.yercal[l].SetLabel(str(yers[l]))
            #print type(yers[0])        
            self.m_staticText18.SetLabel(str(yers[0])+u'-'+str(yers[-1]))
            

        


    def Onmonth( self, event ):
        n=event.GetId()
        m=self.yercal[n].GetLabel()
        #print m
        #sal=khayyam.JalaliDate.today().strftime('%N')
        sal = int(m)
        
        self.HideWithEffect(10,200)
        self.DestroyChildren()
        self.panel = MyPanel3(self,sal)
        self.Show()
'''        
def e2f(number):
    s = ''  
    adadha = {u'0':1632 , u'1':1633 ,u'2':1634 , u'3':1635 , u'4':1636 ,u'5':1637 ,u'6':1638 ,u'7':1639 ,u'8':1640 ,u'9':1641 }
        
    for c in number:
        #print c
        s = s + unichr(adadha[c])
        #print s
    #print s
    return s
'''
        

class ClockPanel(wx.Panel):
    def __init__(self, parent):
        
        wx.Panel.__init__(self, parent)

        

        self.parent = parent

        bSizer1 = wx.BoxSizer( wx.HORIZONTAL )

                
        c6 = ac.AnalogClock(self, size=(200,200),style = wx.RAISED_BORDER)

        colour = wx.Colour(255, 255, 40)
        c6.SetFaceFillColour(colour)
        colour = wx.Colour(220, 176, 3)
        c6.SetBackgroundColour(colour)

        bSizer1.Add(c6,0,wx.EXPAND|wx.ALL,5)

        #self.mbtn3 = wx.Button( self, wx.ID_ANY, u">", wx.DefaultPosition, wx.Size( 20,200 ), wx.BU_EXACTFIT )
        #bSizer1.Add( self.mbtn3, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL, 5 )

        #cal1 = MyPanel2(self,-1,-1)
        #bSizer1.Add(cal1,0,wx.EXPAND|wx.ALL,5)
        
        

        self.SetSizer(bSizer1)
        self.Layout()

        # Connect Events
        #self.mbtn3.Bind( wx.EVT_BUTTON, self.docal )

    def __del__( self ):
        pass
	
	
    # Virtual event handlers, overide them in your derived class
    #def docal( self, event ):
    #    event.Skip()
		

# -*- coding: utf-8 -*- 

###########################################################################
## Python code generated with wxFormBuilder (version Jun 17 2015)
## http://www.wxformbuilder.org/
##
## PLEASE DO "NOT" EDIT THIS FILE!
###########################################################################

import wx
import wx.xrc

###########################################################################
## Class MyFrame1
###########################################################################

class MyFrame1 ( wx.Frame ):
    def __init__( self, parent ):
        wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = wx.EmptyString, pos = wx.DefaultPosition, size = wx.Size( 200,200 ), style=wx.FRAME_FLOAT_ON_PARENT|wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )

        self.SetSizeHints( wx.DefaultSize, wx.DefaultSize )

        self.bS1 = wx.BoxSizer( wx.HORIZONTAL )

        self.shohid = 0

        clock = ClockPanel(self)
        self.bS1.Add(clock,0,wx.EXPAND|wx.ALL,1)

        self.mbtn3 = wx.Button( self, wx.ID_ANY, u">", wx.DefaultPosition, wx.Size( 20,200 ), wx.BU_EXACTFIT )
        self.bS1.Add( self.mbtn3, 1, wx.ALL|wx.EXPAND, 1 )
        
        
        self.cal1 = MyPanel2(self,-1,-1)
        #self.cal1 = MyPanel2(self)
        self.bS1.Add(self.cal1,0,wx.EXPAND|wx.ALL,5)

        self.cal1.Hide()
        #self.Centre( wx.BOTH )

        self.SetSizer(self.bS1)
        self.Layout()

        # Connect Events
        self.mbtn3.Bind( wx.EVT_BUTTON, self.docal )
        

    def __del__( self ):
        pass
	
	
    # Virtual event handlers, overide them in your derived class
    def docal( self, event ):
        if self.shohid == 0:
            self.SetSize((660,250))
            self.cal1.ShowWithEffect(2,200)
            self.mbtn3.SetLabel(u"<")
            
            self.Layout()
            self.shohid = 1
        else:
            self.SetSize((250,250))
            self.cal1.HideWithEffect(3,200)
            self.mbtn3.SetLabel(u">")
            
            self.Layout()
            self.shohid = 0
            
            


'''        
        
if __name__ == '__main__':
    
    app = wx.App()

    frame = MyFrame1(None)
    frame.SetSize((250,250))
    frame.Show()
    app.MainLoop()

'''
